<!--
Copyright 2015, 2016 Suomen Tilaajavastuu Oy

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->


`/cards`
--------

This resource manages identification cards of various kinds.

Synopsis:

* `GET /cards` --- get a list of ids of all cards
* `POST /cards` --- add a new card
* `GET /cards/<id>` --- get the information about a specific card
* `PUT /cards/<id>` --- replace the information for a card
* `GET /cards/<id>/holder_photo` --- get the photo of the card holder
* `PUT /cards/<id>/holder_photo` --- set the photo of the card holder
* `GET /cards/<id>/issuer_logo` --- get the logo of the card issuer
* `PUT /cards/<id>/issuer_logo` --- set the logo of the card issuer
* `DELETE /cards/<id>` --- remove a card

Errors:

* There are no errors that are specific to this resource.

### Description

A `card` resource describes an identification card. There are various
types of cards supported, and the `card_type` field will specify the
type for a specific resource.

Each type of card has different attributes, but many of of them are
identical from type to type. The field descriptions below describe
which types of cards they apply to. In addition, each type of card has
a short section below describing the card.

There are two sub-resource of cards:

* `holder_photo` is a photograph of the card holder.
* `issuer_logo` is the logotype of the card issuer.

In both cases the image shows what was recorded or printed on the
card, not whatever is current.

### Glossary

Some terminology for the `card` resource.

* **card issuer** --- the company who issued the card, i.e., decided
  it to be created and paid for that to happen. Usually, but not
  necessarily, the employer of the card holder.
* **card holder** --- the named person to whom the card was issued.
  Usually, but not necessarily, an employee of the card issuer.
* **card supplier** --- the company who made the card, based on an
  order from the card issuer.

### Finnish VALTTI cards

The VALTTI cards are operated by the company Suomen Tilaajavastuu Oy.
These cards contain an RFID chip with minimal digital information,
only the digital serial number, called `uid` below. On the card is
printed a one-dimensional bar code, called `barcode_id` below. In
addition, some information about the card holder, and the company who
issued the card. That information is not readable from the RFID chip,
and a lookup via this API must be made to retrieve it in a machine
readable form.

FIXME: Add a URL here to a public description of the cards.

    EXAMPLE An example resource for a VALTTI card
    {
        "type": "card",
        "id": "1234",
        "card_type": "VALTTI",
        "card_ids": [
            {
                "card_id_type": "uid",
                "card_id": "1",
            },
            {
                "card_id_type": "barcode_id",
                "card_id": "1",
            }
        ],
        "issued_date": "2015-04-01",
        "created_date": "2015-04-01",
        "valid_until_date": null,
        "expiration_date": null,
        "card_status_history": [
            {
                "card_status": "NotConfirmed",
                "modified_by": "123",
                "modified_timestamp": "2015-02-25T12:13:14+0200",
                "modification_reason": "NewCard"
                "modification_description": "M. issued card"
            }
        ],
        "current_status": "NotConfirmed",
        "org": "4444",
        "person": "7777"
    }


### Swedish ID06 cards

The Swedish construction business uses a card standard known as ID06.
It is managed by the Swedish Construction Federation, and has some
information readable over RFID as well printed on the face of the
card.

There are three types of ID06 card: physical card, virtual card, and
visitor card. A physical card is issued to a specific person and has
their identifying information on them. The virtual card is effectively
an access token installed on a mobile device (phone, tablet) and tied
to a physical card. A visitor card is not specific to a person, and
has no personal information on it. It can be given to someone
temporarily visiting a construction site.

FIXME: Add a URL here to the card specification.

    EXAMPLE An example resource for an ID06 card
    {
        "type": "card",
        "id": "1234",
        "card_type": "ID06",
        "card_ids": [
            {
                "card_id_type": "ID06_id",
                "card_id": "12456",
            }
        ],
        "issued_date": "2015-01-01",
        "created_date": "2015-02-25",
        "valid_from_date": "2015-04-01",
        "valid_until_date": "2018-04-01",
        "expiration_date": "2038-01-19",
        "issuer_gov_org_ids": [
            {
                "country": "SE",
                "org_id_type": "registration_number",
                "gov_org_id": "1111111"
            }
        ],
        "holder_gov_ids": [
            {
                "country": "SE",
                "id_type": "ssn",
                "gov_id": "1212313123"
            }
        ],
        "holder_nationalities": [
            "SE"
        ],
        "holder_names": [
            {
                "full_name": "Lisbeth Salander",
                "sort_key": "Salander, Lisbeth",
                "title": "Miss",
                "given_names": ["Lisbeth"],
                "surnames": ["Salander"]
            }
        ],
        "id06_virtual_enabled": true,
        "id06_virtual_history": [
            {
                "full_name": "Mikael Blomqvist",
                "date": "2001-01-01",
                "enabled": true
            }
        ],
        "id06_bankid_required": true,
        "id06_virtual_devices": [
            "+44 007 007 007 007"
        ],
        "id06_supplier_employee_full_name": "Mikael Blomqvist",
        "card_status_history": [
            {
                "card_status": "active",
                "modified_by": "123",
                "modified_timestamp": "2015-02-25T12:13:14+0200",
                "modification_reason": ""
                "modification_description": "Card created"
            }
        ],
        "current_status": "active",
        "org": "4444",
        "person": "7777"
    }

### Resource fields

The following table describes all the possible fields for a `card`
resource. The "card types" column indicates which card types each
field is valid for.

----------------------------------------------------------------------------
field                   card types      description
-----------             ----------      ------------------------------------
`card_type`             all             type of card; one of `VALTTI`, `ID06`,
                                        `ID06_visitor`

`card_ids`              all             list of unique identifiers for
                                        the card; see below for list items

`issued_date`           all             date when issued, i.e., when the
                                        issuer ordered it

`created_date`          all             date when the card was created

`valid_from_date`       all             first date when card is valid

`valid_until_date`      all             last date when card is valid

`expiration_date`       all             last date when card can be
                                        valid; it should be terminated 

`card_status_history`   all             history status of the card; the last
                                        entry in the list is the current
                                        status; see below for list items

`current_status`        all             current status of the card; the valid
                                        values are the same as in `card_status`
                                        field of the `card_status_history`
                                        record; the value should be the same
                                        as in the last entry of the
                                        `card_status_history`

`org`                   all             resource identifier of the
                                        organisation who issued the card

`issuer_name`           `ID06`,         name of the issuer, as printed on
                        `ID06_visitor`  the card

`issuer_gov_org_ids`    `ID06`,         issuer's government
                        `ID06_visitor`  organisation ids, as recorded on
                                        the card (not necessarily
                                        current info); same structure
                                        as in the `org.gov_org_ids` list

`person`                all             resource identifier of the person
                                        for whom the card was issued

`holder_gov_ids`        `ID06`          card holder's government
                                        identification numbers as
                                        recorded on the card (not
                                        necessarily current); same
                                        structure as `person.gov_ids`

`holder_nationalities`  `ID06`          card holder's nationalities
                                        (list of country codes)

`holder_names`          all             card holder's names as
                                        recorded on the card (not
                                        necessarily current); same
                                        structure as `person.names`

`id06_taxation_country` `ID06`          country code of country to which
                                        card holder pays taxes

`id06_virtual_devices`  `ID06`          phones or other devices which
                                        may get an ID06 virtual card

`id06_virtual_enabled`  `ID06`          are virtual cards allowed?

`id06_virtual_`         `ID06`          date from which virtual cards
`valid_from`                            are valid

`id06_virtual_`         `ID06`          date until which virtual cards
`valid_until`                           are valid

`id06_virtual_history`  `ID06`          list of virtual card enable/disable
                                        changes; see below for details

`id06_bankid_required`  `ID06`          is card holder required to
                                        identify themselves using
                                        a Swedish BankID to put a
                                        virtual card on a mobile
                                        device?

`id06_supplier_         `ID06`          full name of employer at the card
employee_full_name`                     supplier who created the card

------------------------------------------------------------------------

The `card_ids` list has items with the following fields:

* `card_id_type` --- type of card identifier
    - for `VALTTI` cards, one of `uid`, `barcode_id`
    - for `ID06` and `ID06_visitor` cards: `ID06_id`
* `card_id` --- the actual card id

The `card_status_history` list has items with the following fields:

* `card_status` --- status of the card; the allowed values depend on
type of card; the last entry in the list is the current status
    - for `VALTTI` cards, the following states are defined:
        - `NotConfirmed` --- card has not been confirmed yet, and should
          not be used
        - `Active` --- card is active, and may be used
        - `Closed` --- card has been closed, and should not be used
        - `Expired` --- card has expired, and should not be used
    - for `ID06` and `ID06_visitor` cards, the following states are
      defined:
        - `active` --- card is active and may be used
        - `inactive` --- card is inactive, and may not be used; it may
          be re-activated later
        - `terminated` --- card is inactive, and may not be
          re-activated again
* `modified_by` --- the `/persons` resource id of the person who added
  the card (new cards) or changed the card status
* `modified_timestamp` --- timestamp of when the modification was
  made (set by the backend, not the API client)
* `modification_reason` --- reason for the modification; the allowed
  values are dependent on the card type
    - for `VALTTI` cards:
        - `NewCard` --- a new card was created
        - `CardClosed` --- card was closed
        - `CardLost` --- card was lost
        - `CardError` --- other error
    - for `ID06` cards:
        - This, at least for now, a free-form text field. An ID06
          external application should define a list of codes for the
          allowed values and validate against that list. The API
          backend doesn't validate this.

The `id06_virtual_history` field for `ID06` cards is a (possibly
empty) list of records like this:

* `full_name` -- full name of employee at card issuer who changed the
  status of virtual cards
* `date` --- when the status was changed
* `enabled` --- are virtual cards enabled after the change? note that
  the current status must always be in the `id06_virtual_enabled`
  field

### Tests

We create a new card, update them, and delete them.

    SCENARIO manage a card

Client has needed access rights for cards resource.

    GIVEN client has access to scopes
    ... "uapi_cards_post uapi_cards_get uapi_cards_id_get uapi_cards_id_put
    ...  uapi_cards_id_delete uapi_cards_id_holder_photo_get
    ...  uapi_cards_id_holder_photo_put uapi_cards_id_issuer_logo_get
    ...  uapi_cards_id_issuer_logo_put"

Try to create a new card, but with invalid data. These must all fail.

<!--

Commented  out because there's no type-spefic validation in Qvarn now.

First, an empty record:

    WHEN client POSTs /cards with {}
    THEN HTTP status code is 400

-->

Only specific fields are allowed. Test with an invalid field.

    WHEN client POSTs /cards with {"invalid_field": true}
    THEN HTTP status code is 400

<!--

The only mandatory field is `card_type`. Records without that field
must fail.

    WHEN client POSTs /cards with {"issued_date": "2015-04-20"}
    THEN HTTP status code is 400

-->

Create a new card.

    WHEN client POSTs /cards with
    ... {"card_type": "VALTTI",
    ...  "card_ids": [
    ...    {
    ...        "card_id_type": "uid",
    ...	       "card_id": "1"
    ...    },
    ...    {
    ...        "card_id_type": "barcode_id",
    ...	       "card_id": "1"
    ...    }
    ...   ],
    ...  "issued_date": "2015-04-01",
    ...  "created_date": "2015-04-08",
    ...  "valid_until_date": null,
    ...  "expiration_date": null,
    ...  "card_status_history": [
    ...    {
    ...        "card_status": "NotConfirmed",
    ...	       "modified_by": "123",
    ...	       "modified_timestamp": "2015-02-25T12:13:14+0200",
    ...	       "modification_reason": "NewCard",
    ...	       "modification_description": "M. didn't want to activate card yet"
    ...    }
    ...   ],
    ...  "current_status": "NotConfirmed",
    ...  "org": "4444",
    ...  "person": "7777"
    ... }
    THEN HTTP status code is 201
    AND result matches
    ... {"card_type": "VALTTI",
    ...  "card_ids": [
    ...    {
    ...        "card_id_type": "uid",
    ...	       "card_id": "1"
    ...    },
    ...    {
    ...        "card_id_type": "barcode_id",
    ...	       "card_id": "1"
    ...    }
    ...   ],
    ...  "issued_date": "2015-04-01",
    ...  "created_date": "2015-04-08",
    ...  "valid_until_date": null,
    ...  "expiration_date": null,
    ...  "card_status_history": [
    ...    {
    ...        "card_status": "NotConfirmed",
    ...	       "modified_by": "123",
    ...	       "modified_timestamp": "2015-02-25T12:13:14+0200",
    ...	       "modification_reason": "NewCard",
    ...	       "modification_description": "M. didn't want to activate card yet"
    ...    }
    ...   ],
    ...  "current_status": "NotConfirmed",
    ...  "org": "4444",
    ...  "person": "7777"
    ... }
    AND result has key "id" containing a string, saved as $ID1
    AND HTTP Location header is API_URL/cards/$ID1
    AND result has key "revision" containing a string, saved as $REV1

Check that the record is there.

    WHEN client GETs /cards
    THEN HTTP status code is 200
    AND result has key "resources", a list containing {"id": "$ID1"}

    WHEN client GETs /cards/$ID1
    THEN HTTP status code is 200
    AND result matches
    ... {"card_type": "VALTTI",
    ...  "card_ids": [
    ...    {
    ...        "card_id_type": "uid",
    ...	       "card_id": "1"
    ...    },
    ...    {
    ...        "card_id_type": "barcode_id",
    ...	       "card_id": "1"
    ...    }
    ...   ],
    ...  "issued_date": "2015-04-01",
    ...  "created_date": "2015-04-08",
    ...  "valid_until_date": null,
    ...  "expiration_date": null,
    ...  "card_status_history": [
    ...    {
    ...        "card_status": "NotConfirmed",
    ...	       "modified_by": "123",
    ...	       "modified_timestamp": "2015-02-25T12:13:14+0200",
    ...	       "modification_reason": "NewCard",
    ...	       "modification_description": "M. didn't want to activate card yet"
    ...    }
    ...   ],
    ...  "current_status": "NotConfirmed",
    ...  "org": "4444",
    ...  "person": "7777"
    ... }
    AND result has key "id" containing a string, saved as $ID1

Update the record.

    WHEN client PUTs /cards/$ID1 with
    ... {"revision": "$REV1",
    ...  "card_type": "VALTTI",
    ...  "card_ids": [
    ...    {
    ...        "card_id_type": "uid",
    ...	       "card_id": "1"
    ...    },
    ...    {
    ...        "card_id_type": "barcode_id",
    ...	       "card_id": "1"
    ...    }
    ...   ],
    ...  "issued_date": "2015-04-01",
    ...  "created_date": "2015-04-08",
    ...  "valid_until_date": "2016-04-01",
    ...  "expiration_date": "2038-01-19",
    ...  "card_status_history": [
    ...    {
    ...        "card_status": "NotConfirmed",
    ...	       "modified_by": "123",
    ...	       "modified_timestamp": "2015-02-25T12:13:14+0200",
    ...	       "modification_reason": "NewCard",
    ...	       "modification_description": "M. didn't want to activate card yet"
    ...    }
    ...   ],
    ...  "current_status": "NotConfirmed",
    ...  "org": "4444",
    ...  "person": "7777"
    ... }
    THEN HTTP status code is 200
    AND result matches {"valid_until_date": "2016-04-01"}
    AND result matches {"expiration_date": "2038-01-19"}
    AND result has key "id" containing a string, saved as $ID2
    AND values "$ID1" and "$ID2" are identical
    AND result has key "revision" containing a string, saved as $REV2

Cannot get an unsent card holder photo.

    WHEN client GETs /cards/$ID1/holder_photo
    THEN HTTP status code is 404

Send a card holder photo.

    GIVEN file photo.png containing "\x89 this is a binary file"

    WHEN client PUTs file photo.png with content type image/png
    ...  and revision $REV2 to /cards/$ID1/holder_photo
    THEN HTTP status code is 200

    WHEN client GETs /cards/$ID1/holder_photo
    THEN HTTP status code is 200
    AND HTTP header Content-Type is image/png
    AND HTTP header Revision exists
    AND result body matches file photo.png

    WHEN client GETs /cards/$ID1
    THEN HTTP status code is 200
    AND result has key "revision" containing a string, saved as $REV3

Cannot send a photo with no Content-Length header set.
Without request body (no Content-Length header) server responds with status
Length Required 411.

    WHEN client PUTs no file with content type image/png
    ...  and revision $REV3 to /cards/$ID1/holder_photo
    THEN HTTP status code is 411

Cannot get an unsent issuer logo file.

    WHEN client GETs /cards/$ID1/issuer_logo
    THEN HTTP status code is 404

Send an issuer logo file.

    GIVEN file logo.png containing "\x89 this a binary file"

    WHEN client PUTs file logo.png with content type image/png
    ...  and revision $REV3 to /cards/$ID1/issuer_logo
    THEN HTTP status code is 200

    WHEN client GETs /cards/$ID1/issuer_logo
    THEN HTTP status code is 200
    AND HTTP header Content-Type is image/png
    AND HTTP header Revision exists
    AND result body matches file logo.png

    WHEN client GETs /cards/$ID1
    THEN HTTP status code is 200
    AND result has key "revision" containing a string, saved as $REV4

Cannot send a file with no Content-Length header set.
Without request body (no Content-Length header) server responds with status
Length Required 411.

    WHEN client PUTs no file with content type image/png
    ...  and revision $REV4 to /cards/$ID1/issuer_logo
    THEN HTTP status code is 411

Update the main record, this should not affect the subrecord(s).

    WHEN client GETs /cards/$ID1
    THEN result has key "revision" containing a string, saved as $REV5

    WHEN client PUTs /cards/$ID1 with
    ... {"revision": "$REV5",
    ...  "card_type": "VALTTI",
    ...  "card_ids": [
    ...    {
    ...        "card_id_type": "uid",
    ...	       "card_id": "1"
    ...    },
    ...    {
    ...        "card_id_type": "barcode_id",
    ...	       "card_id": "1"
    ...    }
    ...   ],
    ...  "issued_date": "2015-04-01",
    ...  "valid_until_date": "2016-04-01",
    ...  "card_status_history": [
    ...    {
    ...        "card_status": "NotConfirmed",
    ...	       "modified_by": "123",
    ...	       "modified_timestamp": "2015-02-25T12:13:14+0200",
    ...	       "modification_reason": "NewCard",
    ...	       "modification_description": "M. didn't want to activate card yet"
    ...    }
    ...   ],
    ...  "org": "4444",
    ...  "person": "7777"
    ... }
    THEN HTTP status code is 200
    AND result matches {"valid_until_date": "2016-04-01"}

    WHEN client GETs /cards/$ID1/holder_photo
    THEN HTTP status code is 200
    AND HTTP header Content-Type is image/png
    AND HTTP header Revision exists
    AND result body matches file photo.png

    WHEN client GETs /cards/$ID1/issuer_logo
    THEN HTTP status code is 200
    AND HTTP header Content-Type is image/png
    AND HTTP header Revision exists
    AND result body matches file logo.png

Delete the record.

    WHEN client DELETEs /cards/$ID1
    THEN HTTP status code is 200

    WHEN client GETs /cards/$ID1
    THEN HTTP status code is 404
