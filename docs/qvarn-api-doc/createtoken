#!/usr/bin/env python2
#
# Reads scopes from STDIN, gets JWT from gluu and writes it to STDOUT.
# The API URL is given as a command line argument.
#
# The API client id and corresponding secret are stored in a file,
# either ~/.config/qvarn/createtoken.conf (an INI file, with sections
# named after the API URL), or a file named in the environment variable
# QVARN_CREATETOKEN_CONF.
#
# Copyright 2015, 2016 Suomen Tilaajavastuu Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import base64
import ConfigParser
import logging
import os
import sys

import requests
import urllib3


# We do not currently care about verify certificates. Maybe later.
urllib3.disable_warnings()
logging.captureWarnings(True)


def main():
    api_url = sys.argv[1]
    client_id, client_secret = get_credentials(api_url)
    scopes = get_scopes()
    token = get_token(api_url, client_id, client_secret, scopes)
    sys.stdout.write(token + u'\n')


def get_scopes():
    return sys.stdin.read().strip()


def get_credentials(api_url):
    default_filename = os.path.expanduser('~/.config/qvarn/createtoken.conf')
    filename = os.environ.get('QVARN_CREATETOKEN_CONF', default_filename)

    cp = ConfigParser.ConfigParser()
    cp.read([filename])
    if not cp.has_section(api_url):
        sys.stderr.write(
            'In config file {}, no section {}'.format(filename, api_url))
        sys.exit(2)

    return cp.get(api_url, 'client_id'), cp.get(api_url, 'client_secret')


def get_token(api_url, client_id, client_secret, scopes):
    token_endpoint_url = u'{}/auth/token'.format(api_url)
    response = requests.post(
        token_endpoint_url,
        data={
            u'grant_type': u'client_credentials',
            u'scope': scopes,
        },
        auth=(client_id, client_secret),
        verify=False)

    if not response.ok:
        sys.stderr.write('Failed to get access token\n')
        sys.stderr.write('Status code: {}\n'.format(response.status_code))
        sys.stderr.write('Response headers: {}\n'.format(response.headers))
        sys.stderr.write('Response body: {}\n'.format(response.json()))
        sys.exit(1)

    return response.json()[u'access_token']


if __name__ == '__main__':
    main()
